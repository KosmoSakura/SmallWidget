package greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.bean.Weight;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIGHT".
*/
public class WeightDao extends AbstractDao<Weight, Long> {

    public static final String TABLENAME = "WEIGHT";

    /**
     * Properties of entity Weight.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Value = new Property(2, Float.class, "value", false, "VALUE");
        public final static Property Unit = new Property(3, Integer.class, "unit", false, "UNIT");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Year = new Property(5, Integer.class, "year", false, "YEAR");
        public final static Property Month = new Property(6, Integer.class, "month", false, "MONTH");
        public final static Property Day = new Property(7, Integer.class, "day", false, "DAY");
        public final static Property Hour = new Property(8, Integer.class, "hour", false, "HOUR");
        public final static Property Min = new Property(9, Integer.class, "min", false, "MIN");
        public final static Property Hour_str = new Property(10, String.class, "hour_str", false, "HOUR_STR");
        public final static Property DefaultVaule = new Property(11, Boolean.class, "defaultVaule", false, "DEFAULT_VAULE");
    };


    public WeightDao(DaoConfig config) {
        super(config);
    }
    
    public WeightDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIGHT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"VALUE\" REAL," + // 2: value
                "\"UNIT\" INTEGER," + // 3: unit
                "\"TIME\" TEXT," + // 4: time
                "\"YEAR\" INTEGER," + // 5: year
                "\"MONTH\" INTEGER," + // 6: month
                "\"DAY\" INTEGER," + // 7: day
                "\"HOUR\" INTEGER," + // 8: hour
                "\"MIN\" INTEGER," + // 9: min
                "\"HOUR_STR\" TEXT," + // 10: hour_str
                "\"DEFAULT_VAULE\" INTEGER);"); // 11: defaultVaule
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIGHT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Weight entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Float value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(3, value);
        }
 
        Integer unit = entity.getUnit();
        if (unit != null) {
            stmt.bindLong(4, unit);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(6, year);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(7, month);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(8, day);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(9, hour);
        }
 
        Integer min = entity.getMin();
        if (min != null) {
            stmt.bindLong(10, min);
        }
 
        String hour_str = entity.getHour_str();
        if (hour_str != null) {
            stmt.bindString(11, hour_str);
        }
 
        Boolean defaultVaule = entity.getDefaultVaule();
        if (defaultVaule != null) {
            stmt.bindLong(12, defaultVaule ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Weight readEntity(Cursor cursor, int offset) {
        Weight entity = new Weight( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // unit
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // year
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // month
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // day
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // hour
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // min
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hour_str
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // defaultVaule
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Weight entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setUnit(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYear(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMonth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDay(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHour(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMin(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHour_str(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDefaultVaule(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Weight entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Weight entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
